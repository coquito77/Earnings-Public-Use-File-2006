library(maptools)
library(broom)
library(tidyr)
library(ggmap)
library(rvest)
library(png)
library(grid)
library(descr) # to visualize the chisquare test with a title
library(pander) # for other crosstab tables
library(ggplot2)
library(RColorBrewer)
library(scales)
library(raster)   ## To convert an "Extent" object to a "SpatialPolygons" object.
library(rgeos)
library(NbClust)
Counties <- readShapePoly("C:/Users/e551910/Google Drive/MockSampleRecidivismStudy/cb_2014_us_county_500k")
Counties@data$id <- rownames(Counties@data)
head(Counties@data)
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(fluidRow(column(12, DT::dataTableOutput('tbl')))),
server = function(input, output) {
output$tbl = DT::renderDataTable(
iris, options = list(lengthChange = FALSE)
)
}
)
}
source('~/.active-rstudio-document')
)
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(fluidRow(column(12, DT::dataTableOutput('tbl')))),
server = function(input, output) {
output$tbl = DT::renderDataTable(
iris, options = list(lengthChange = FALSE)
)
}
)
}
packrat::off()
# set global chunk optionsrm(list=ls(all=TRUE)) #start with empty workspace
rm(list=ls(all=TRUE)) #start with empty workspace
startTime <- Sys.time()
knitr::opts_chunk$set(cache = TRUE, echo = FALSE, include = FALSE)
doInstall <- FALSE # Change to TRUE if you do want packages installed.
toInstall <- c( "data.table", "tidyr", "dplyr", "ggplot2", "scales","sampling")
if (doInstall) {install.packages(toInstall, repos = "http://cran.us.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
setwd("C:/Users/e551910/Google Drive/SSAMasterFile/") # set the working directory
list.files() # see whats there
temp <- tempfile()
download.file("https://www.socialsecurity.gov/policy/docs/microdata/epuf/epuf2006_csv_files.zip",
quiet = TRUE,
destfile = temp)
con <- unzip(temp)
# take a look at the files on the data
con
ptm <- proc.time()
dataAnnual <- fread(con[1],
header = T,
verbose = FALSE,
sep = ',',
showProgress = TRUE)
proc.time() - ptm
wagesCPI <- fread("./CPIAUCSL.csv") %>%
mutate(Year = substr(DATE, 1, 4) ) %>%
group_by(Year) %>%
slice(1)
dataAnnual <- dataAnnual %>%
as.data.frame() %>%
left_join(wagesCPI,
by = c("YEAR_EARN" = "Year"))
head(dataAnnual)
str(dataAnnual)
dataAnnual <- dataAnnual %>%
as.data.frame() %>%
left_join(wagesCPI,
by = c("YEAR_EARN" = "Year")) %>%
select(-DATE)
dataAnnual <- fread(con[1],
header = T,
verbose = FALSE,
sep = ',',
showProgress = TRUE)
t<- dataAnnual %>%
as.data.frame() %>%
left_join(wagesCPI,
by = c("YEAR_EARN" = "Year")) %>%
select(-DATE)
head(t)
t<- dataAnnual %>%
as.data.frame() %>%
left_join(wagesCPI,
by = c("YEAR_EARN" = "Year")) %>%
select(-DATE) %>%
mutate(realWage = (ANNUAL_EARNINGS/ VALUE) *100)
str(t)
t<- dataAnnual %>%
as.data.frame() %>%
left_join(wagesCPI,
by = c("YEAR_EARN" = "Year")) %>%
select(-DATE) %>%
mutate(YEAR_EARN = as.integer(YEAR_EARN),
realWage = (ANNUAL_EARNINGS / VALUE)*100)
str(t)
t<- dataAnnual %>%
as.data.frame() %>%
mutate(YEAR_EARN = as.integer(YEAR_EARN)) %>%
left_join(wagesCPI,
by = c("YEAR_EARN" = "Year")) %>%
select(-DATE)
str(t)
t<- dataAnnual %>%
as.data.frame() %>%
left_join(wagesCPI,
by = c("YEAR_EARN" = "Year")) %>%
select(-DATE) %>%
mutate(ANNUAL_EARNINGS = as.integer(ANNUAL_EARNINGS),
realWage = (ANNUAL_EARNINGS / VALUE)*100)
str(t)
head(t)
CountsByYear <- dataAnnual %>%
select(ID, YEAR_EARN) %>%
group_by(YEAR_EARN) %>%
summarise(count = n()) %>%
arrange(YEAR_EARN)
View(CountsByYear)
dataAnnual <- dataAnnual %>%
as.data.frame() %>%
left_join(wagesCPI,
by = c("YEAR_EARN" = "Year")) %>%
select(-DATE) %>%
mutate(ANNUAL_EARNINGS = as.integer(ANNUAL_EARNINGS),
realWage = (ANNUAL_EARNINGS / VALUE)*100)
IDbyFirstYear <- dataAnnual %>%
select(ID, YEAR_EARN) %>%
#mutate(YEAR_EARN = as.integer(YEAR_EARN)) %>%
arrange(ID, YEAR_EARN) %>%
group_by(ID) %>%
slice(1)
set.seed(1)
sampleRecords <- IDbyFirstYear %>%
group_by(YEAR_EARN) %>%
do(sample_n(., 1200)) %>%
select(ID)
left_join(sampleRecords, dataAnnual,
by = c("ID" = "ID")) %>%
as.data.frame()
dataAnnualSampleSet <- left_join(sampleRecords, dataAnnual,
by = c("ID" = "ID")) %>%
as.data.frame()
str(dataAnnualSampleSet)
dataAnnualSampleSet <- left_join(sampleRecords, dataAnnual,
by = c("ID" = "ID")) %>%
as.data.frame() %>%
dplyr::select(ID, YEAR_EARN = YEAR_EARN.y, ANNUAL_EARNINGS, ANNUAL_QTRS, realWage)
dataAnnualSampleSetSummarized <- dataAnnualSampleSet %>%
select(ID, YEAR_EARN) %>%
mutate(YEAR_EARN = as.integer(YEAR_EARN)) %>%
group_by(ID) %>%
mutate(minYear = min(YEAR_EARN),
maxYear = max(YEAR_EARN)) %>%
select(ID,minYear, maxYear) %>%
distinct() %>%
mutate(Years = maxYear - minYear) %>%
select(ID, minYear, Years) %>%
ungroup() %>%
as.data.table()
dataAnnualSampleSetLong <- dataAnnualSampleSetSummarized[,.(Year=minYear+0:(Years-1)), ID] %>%
mutate(YEAR_EARN = as.character(Year)) %>%
left_join(dataAnnual) %>%
group_by(ID) %>%
arrange(Year) %>%
mutate(PriorYearEarnings = lag(realWage),
fivePriorYearEarnings = lag(realWage,5),
PriorYearDiff = realWage - PriorYearEarnings,
FiveYearDiff = realWage - fivePriorYearEarnings)
class(dataAnnualSampleSetSummarized)
dataAnnualSampleSetSummarized <- dataAnnualSampleSet %>%
select(ID, YEAR_EARN) %>%
mutate(YEAR_EARN = as.integer(YEAR_EARN)) %>%
group_by(ID) %>%
mutate(minYear = min(YEAR_EARN),
maxYear = max(YEAR_EARN)) %>%
select(ID,minYear, maxYear) %>%
distinct() %>%
mutate(Years = maxYear - minYear) %>%
select(ID, minYear, Years) %>%
ungroup()
head(dataAnnualSampleSetSummarized)
dataAnnualSampleSetLong <- dataAnnualSampleSetSummarized[,.(Year=minYear+0:(Years-1)), ID] %>%
mutate(YEAR_EARN = as.character(Year))
dataAnnualSampleSetSummarized <- dataAnnualSampleSet %>%
select(ID, YEAR_EARN) %>%
mutate(YEAR_EARN = as.integer(YEAR_EARN)) %>%
group_by(ID) %>%
mutate(minYear = min(YEAR_EARN),
maxYear = max(YEAR_EARN)) %>%
select(ID,minYear, maxYear) %>%
distinct() %>%
mutate(Years = maxYear - minYear) %>%
select(ID, minYear, Years) %>%
ungroup() %>%
as.data.table()
dataAnnualSampleSetLong <- dataAnnualSampleSetSummarized[,.(Year=minYear+0:(Years-1)), ID] %>%
mutate(YEAR_EARN = as.character(Year))
head(dataAnnualSampleSetLong)
class(dataAnnual)
dataAnnual <- dataAnnual %>%
as.data.frame() %>%
left_join(wagesCPI,
by = c("YEAR_EARN" = "Year")) %>%
select(-DATE) %>%
mutate(ANNUAL_EARNINGS = as.integer(ANNUAL_EARNINGS),
realWage = (ANNUAL_EARNINGS / VALUE)*100) %>%
as.data.table()
dataAnnual <- fread(con[1],
header = T,
verbose = FALSE,
sep = ',',
showProgress = TRUE)
wagesCPI <- fread("./CPIAUCSL.csv") %>%
mutate(Year = substr(DATE, 1, 4) ) %>%
group_by(Year) %>%
slice(1)
dataAnnual <- dataAnnual %>%
as.data.frame() %>%
left_join(wagesCPI,
by = c("YEAR_EARN" = "Year")) %>%
select(-DATE) %>%
mutate(ANNUAL_EARNINGS = as.integer(ANNUAL_EARNINGS),
realWage = (ANNUAL_EARNINGS / VALUE)*100) %>%
as.data.table()
CountsByYear <- dataAnnual %>%
select(ID, YEAR_EARN) %>%
group_by(YEAR_EARN) %>%
summarise(count = n()) %>%
arrange(YEAR_EARN)
# library(devtools)
# source_gist(6424112)
IDbyFirstYear <- dataAnnual %>%
select(ID, YEAR_EARN) %>%
#mutate(YEAR_EARN = as.integer(YEAR_EARN)) %>%
arrange(ID, YEAR_EARN) %>%
group_by(ID) %>%
slice(1)
set.seed(1)
sampleRecords <- IDbyFirstYear %>%
group_by(YEAR_EARN) %>%
do(sample_n(., 1200)) %>%
select(ID)
# match the sample to the orig data
dataAnnualSampleSet <- left_join(sampleRecords, dataAnnual,
by = c("ID" = "ID")) %>%
as.data.frame() %>%
dplyr::select(ID, YEAR_EARN = YEAR_EARN.y, ANNUAL_EARNINGS, ANNUAL_QTRS, realWage)
dataAnnualSampleSetSummarized <- dataAnnualSampleSet %>%
select(ID, YEAR_EARN) %>%
mutate(YEAR_EARN = as.integer(YEAR_EARN)) %>%
group_by(ID) %>%
mutate(minYear = min(YEAR_EARN),
maxYear = max(YEAR_EARN)) %>%
select(ID,minYear, maxYear) %>%
distinct() %>%
mutate(Years = maxYear - minYear) %>%
select(ID, minYear, Years) %>%
ungroup() %>%
as.data.table()
rm(t)
dataAnnualSampleSetLong <- dataAnnualSampleSetSummarized[,.(Year=minYear+0:(Years-1)), ID] %>%
mutate(YEAR_EARN = as.character(Year)) %>%
left_join(dataAnnual) %>%
group_by(ID) %>%
arrange(Year) %>%
mutate(PriorYearEarnings = lag(realWage),
fivePriorYearEarnings = lag(realWage,5),
PriorYearDiff = realWage - PriorYearEarnings,
FiveYearDiff = realWage - fivePriorYearEarnings)
hist(dataAnnualSampleSetLong$PriorYearEarnings)
head(dataAnnualSampleSetLong)
rm(dataAnnual)
dataDemographics <- fread(con[2], header = T, sep = ',')
demographicWithSample <- left_join(dataAnnualSampleSetLong,
dataDemographics) %>%
mutate(FiveYearPrcnChng  =  FiveYearDiff/realWage ) %>%
group_by(YEAR_EARN) %>%
mutate(YOB = as.integer(YOB),
Age = YOB-
FiveYearPrcnChngRank =  cume_dist(FiveYearPrcnChng),
FiveYearPrcnChngRankGroups = cut(FiveYearPrcnChngRank, # make groups
#breaks = c(0,.24,.49,.75,1),
breaks = seq(0, 1, 0.25),
#labels = c("0-.24",".25-.5",".51-.75","1"),
include.lowest = TRUE),
ANNUAL_EARNINGSRank =  cume_dist(ANNUAL_EARNINGS),
ANNUAL_EARNINGSRankGroups = cut(ANNUAL_EARNINGSRank, # make groups
#breaks = c(0,.24,.49,.75,1),
breaks = seq(0, 1, 0.25),
#labels = c("0-.24",".25-.5",".51-.75","1"),
include.lowest = TRUE),
fivePriorYearEarningsRank =  cume_dist(fivePriorYearEarnings),
fivePriorYearEarningsRankGroups = cut(fivePriorYearEarningsRank, # make groups
#breaks = c(0,.24,.49,.75,1),
breaks = seq(0, 1, 0.25),
#labels = c("0-.24",".25-.5",".51-.75","1"),
include.lowest = TRUE))
demographicWithSample <- left_join(dataAnnualSampleSetLong,
dataDemographics) %>%
mutate(FiveYearPrcnChng  =  FiveYearDiff/realWage ) %>%
group_by(YEAR_EARN) %>%
mutate(YOB = as.integer(YOB),
AgeEarnings = Year - YOB,
FiveYearPrcnChngRank =  cume_dist(FiveYearPrcnChng),
FiveYearPrcnChngRankGroups = cut(FiveYearPrcnChngRank, # make groups
#breaks = c(0,.24,.49,.75,1),
breaks = seq(0, 1, 0.25),
#labels = c("0-.24",".25-.5",".51-.75","1"),
include.lowest = TRUE),
ANNUAL_EARNINGSRank =  cume_dist(ANNUAL_EARNINGS),
ANNUAL_EARNINGSRankGroups = cut(ANNUAL_EARNINGSRank, # make groups
#breaks = c(0,.24,.49,.75,1),
breaks = seq(0, 1, 0.25),
#labels = c("0-.24",".25-.5",".51-.75","1"),
include.lowest = TRUE),
fivePriorYearEarningsRank =  cume_dist(fivePriorYearEarnings),
fivePriorYearEarningsRankGroups = cut(fivePriorYearEarningsRank, # make groups
#breaks = c(0,.24,.49,.75,1),
breaks = seq(0, 1, 0.25),
#labels = c("0-.24",".25-.5",".51-.75","1"),
include.lowest = TRUE))
demographicWithSample <- left_join(dataAnnualSampleSetLong,
dataDemographics) %>%
mutate(FiveYearPrcnChng  =  FiveYearDiff/realWage ) %>%
group_by(YEAR_EARN) %>%
mutate(FiveYearPrcnChngRank =  cume_dist(FiveYearPrcnChng),
FiveYearPrcnChngRankGroups = cut(FiveYearPrcnChngRank, # make groups
#breaks = c(0,.24,.49,.75,1),
breaks = seq(0, 1, 0.25),
#labels = c("0-.24",".25-.5",".51-.75","1"),
include.lowest = TRUE),
ANNUAL_EARNINGSRank =  cume_dist(ANNUAL_EARNINGS),
ANNUAL_EARNINGSRankGroups = cut(ANNUAL_EARNINGSRank, # make groups
#breaks = c(0,.24,.49,.75,1),
breaks = seq(0, 1, 0.25),
#labels = c("0-.24",".25-.5",".51-.75","1"),
include.lowest = TRUE),
fivePriorYearEarningsRank =  cume_dist(fivePriorYearEarnings),
fivePriorYearEarningsRankGroups = cut(fivePriorYearEarningsRank, # make groups
#breaks = c(0,.24,.49,.75,1),
breaks = seq(0, 1, 0.25),
#labels = c("0-.24",".25-.5",".51-.75","1"),
include.lowest = TRUE))
unlink("./EPUF2006_ANNUAL.csv")
unlink("./EPUF2006_DEMOGRAPHIC.csv")
# remove all the objects exept one
rm(list=setdiff(ls(), "demographicWithSample"))
# add age of earner
demographicWithSample <- demographicWithSample %>%
mutate(YOB = as.integer(YOB),
AgeEarnings = Year - YOB)
save.image(file = "lifeCyclErnnRiskRData.RData")
demographicWithSample %>%
ggplot( aes(fivePriorYearEarnings)) +
geom_histogram(aes(), bins = 100, alpha = 1/3) +
stat_function(fun = dnorm,
na.rm = TRUE,
args = list(mean = mean(demographicWithSample$fivePriorYearEarnings,
na.rm = TRUE),
sd = sd(demographicWithSample$fivePriorYearEarnings,
na.rm = TRUE)),
#lwd = 1,
size = 1,
alpha = 1/3,
col = 'red') +
scale_y_continuous(#trans=log_trans(),
labels = comma) +
scale_x_continuous(labels = comma) +
theme_minimal() +
labs(x = "Five Year Difference", y = "Frequency")
demographicWithSample %>%
ggplot( aes(PriorYearDiff)) +
geom_histogram(aes(), bins = 100) +
facet_wrap(~ Year,  ncol = 7, scales = "free") +
stat_function(fun = dnorm,
na.rm = TRUE,
args = list(mean = mean(demographicWithSample$PriorYearDiff,
na.rm = TRUE),
sd = sd(demographicWithSample$PriorYearDiff,
na.rm = TRUE)),
#lwd = 1,
size = 1,
alpha = 1/3,
col = 'red') +
scale_y_continuous(labels=function(x)x/1000)+
scale_x_continuous(labels = comma)
demographicWithSample %>%
ggplot( aes(PriorYearDiff)) +
geom_histogram(aes(), bins = 100) +
facet_wrap(~ Year,  ncol = 7, scales = "free") +
stat_function(fun = dnorm,
na.rm = TRUE,
args = list(mean = mean(demographicWithSample$PriorYearDiff,
na.rm = TRUE),
sd = sd(demographicWithSample$PriorYearDiff,
na.rm = TRUE)),
#lwd = 1,
size = 1,
alpha = 1/3,
col = 'red') +
scale_y_continuous(labels=function(x)x/1000)+
scale_x_continuous(labels = comma) +
coord_cartesian(xlim = c(30000, 30000)) +
theme_minimal() +
labs(x = "Prior Year Difference", y = "Frequency (thousands)") +
theme(
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "grey90",
size = 1),
strip.text.x = element_text(size = 4,
colour = "black",
angle = 00 #, lineheight = .5
),
axis.title.x = element_text(size = 8,
angle = 00),
axis.text.x = element_text(colour = "black",
size = 4,
angle = 90,
vjust = .5),
axis.title.y = element_text(size = 8,
angle = 90),
axis.text.y = element_text(colour = "black",
size = 5,
angle = 00,
vjust = .5),
plot.margin = unit(c(0,0,0,0), "cm"))
# http://stackoverflow.com/questions/5688082/ggplot2-overlay-histogram-with-density-curve
demographicWithSample %>%
ggplot( aes(PriorYearDiff)) +
geom_histogram(aes(), bins = 100) +
facet_wrap(~ Year,  ncol = 7, scales = "free") +
stat_function(fun = dnorm,
na.rm = TRUE,
args = list(mean = mean(demographicWithSample$PriorYearDiff,
na.rm = TRUE),
sd = sd(demographicWithSample$PriorYearDiff,
na.rm = TRUE)),
#lwd = 1,
size = 1,
alpha = 1/3,
col = 'red') +
scale_y_continuous(labels=function(x)x/1000)+
scale_x_continuous(labels = comma) +
#coord_cartesian(xlim = c(30000, 30000)) +
theme_minimal() +
labs(x = "Prior Year Difference", y = "Frequency (thousands)") +
theme(
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "grey90",
size = 1),
strip.text.x = element_text(size = 4,
colour = "black",
angle = 00 #, lineheight = .5
),
axis.title.x = element_text(size = 8,
angle = 00),
axis.text.x = element_text(colour = "black",
size = 4,
angle = 90,
vjust = .5),
axis.title.y = element_text(size = 8,
angle = 90),
axis.text.y = element_text(colour = "black",
size = 5,
angle = 00,
vjust = .5),
plot.margin = unit(c(0,0,0,0), "cm"))
# http://stackoverflow.com/questions/5688082/ggplot2-overlay-histogram-with-density-curve
demographicWithSample %>%
ggplot( aes(FiveYearPrcnChngRankGroups)) +
stat_count(width = 0.5) +
facet_wrap(~ Year,  ncol = 7, scales = "free",  dir = "v") +
scale_y_continuous(labels=function(x)x/1000) +
#scale_x_continuous(labels = comma) +
theme_minimal() +
labs(x = "Five Year Difference", y = "Frequency (thousands)") +
theme(
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "grey90",
size = 1),
strip.text.x = element_text(size = 4,
colour = "black",
angle = 00 #, lineheight = .5
),
axis.title.x = element_text(size = 8,
angle = 00),
axis.text.x = element_text(colour = "black",
size = 4,
angle = 90,
vjust = .5),
axis.title.y = element_text(size = 8,
angle = 90),
axis.text.y = element_text(colour = "black",
size = 5,
angle = 00,
vjust = .5),
plot.margin = unit(c(0,0,0,0), "cm"))
